# -*- coding: utf-8 -*-
"""Workshop - 10 minutes to pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/MrcRjs/317d16d846ac27c7a7396fe806e75935/workshop-10-minutes-to-pandas.ipynb

# Workshop - 10 Minutes to pandas

Work from the pandas documentation:
- [`https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html`](https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html)

You may want to read in an external dataframe after trying the examples at the end of the "10 minutes to pandas" documentation above. Try these:  
- https://raw.githubusercontent.com/datalab-datasets/file-samples/master/diamonds.csv
- https://raw.githubusercontent.com/datalab-datasets/wine-quality/master/winequality-red.csv
- https://raw.githubusercontent.com/datalab-datasets/wine-quality/master/winequality-white.csv

Find a few more details on these datasets and others here:
- https://github.com/datalab-datasets

The diamonds dataframe can be read by pandas with:
"""

# import pandas as pd
# diamonds_pdf = pd.read_csv('https://raw.githubusercontent.com/datalab-datasets/file-samples/master/diamonds.csv').drop(columns='Unnamed: 0')

import numpy as np
import pandas as pd

s = pd.Series([1, 3, 5, np.nan, 6, 8,100])
s

dates = pd.date_range('20130101', periods=6)
dates

cols = list('ABCD')
df = pd.DataFrame(np.random.randn(len(dates), len(cols)), index=dates, columns=cols)
df

df2 = pd.DataFrame({'A': 1.,
    'B': pd.Timestamp('20130102'),
    'C': pd.Series(1, index=list(range(4)), dtype='float32'),
    'D': np.array([3] * 4, dtype='int32'),
    'E': pd.Categorical(["test", "train", "test", "train"]),
    'F': 'foo'})
df2

df2.dtypes

# Data broadcasting
s15 = pd.Series(2, list('ABCD'))
s15

pd.Series({'a':5},index=['a','b','c'])

type(np.NaN)

pd.Series({'a': {'bar': 'Nested possible'}, 'b': 8},index=['a','b','c'])

print(s)

s[0]
s.dtype

s[:3]

s[s > s.median()]

s.median()

s.mean()

s.to_numpy()

s = pd.Series(np.random.randn(5), index=['a', 'b', 'c', 'd', 'e'])

s.index

# s['f']

print(s.get('f', np.NaN))

s

s/5

(s[1:] + s[:-1]).dropna()
